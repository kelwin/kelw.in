<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Kelwin</title><link href="http://kelw.in/" rel="alternate"></link><link href="http://kelw.in/feeds/all.atom.xml" rel="self"></link><id>http://kelw.in/</id><updated>2013-09-05T22:30:00+08:00</updated><entry><title>Debugging WebKit on Android</title><link href="http://kelw.in/2013-09-05/debugging-webkit-on-android.html" rel="alternate"></link><updated>2013-09-05T22:30:00+08:00</updated><author><name>kelwin</name></author><id>tag:kelw.in,2013-09-05:2013-09-05/debugging-webkit-on-android.html</id><summary type="html">&lt;p&gt;Debugging is the best way to understand crash of WebKit, which will help a lot to write exploits. Since WebKit is open-source, we could achieve source-level debugging. Now let me introduce the steps. &lt;/p&gt;
&lt;h2&gt;Building Android from Source&lt;/h2&gt;
&lt;p&gt;No matter whether you use emulator or real device(Nexus series), we should get corresponding symbols and sources. Building the whole system yourself will help to generate all the stuff needed - symbols and sources for all the binaries and shared libraries. You can follow the &lt;a href="http://source.android.com/source/building.html"&gt;official guide&lt;/a&gt; and get the emulator images or flash your device. Symbols will be generated in the directory &lt;code&gt;out/target/product/generic/symbols&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I've compiled an emulator of Android 4.0.4 and get all the symbols needed in this &lt;a href="http://pan.baidu.com/share/link?shareid=1555478836&amp;amp;uk=3660622653"&gt;archive&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Preparing Symbols and Source Code&lt;/h2&gt;
&lt;p&gt;In most cases, we need symbols of  &lt;code&gt;app_process&lt;/code&gt;, &lt;code&gt;libc.so&lt;/code&gt;, &lt;code&gt;libdvm.so&lt;/code&gt;, &lt;code&gt;libstdc++.so&lt;/code&gt;, &lt;code&gt;libwebcore.so&lt;/code&gt; and &lt;code&gt;linker&lt;/code&gt;. &lt;code&gt;app_process&lt;/code&gt; is the process that every Android application forks from. For source code, we only need &lt;code&gt;external/webkit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Copy the symbols to the directory &lt;code&gt;symbols&lt;/code&gt; and the source code of WebKit to the directory &lt;code&gt;source&lt;/code&gt;. Thus we get the symbols and source code done. I've already get this done in the archive above.&lt;/p&gt;
&lt;h2&gt;Debugging WebKit&lt;/h2&gt;
&lt;p&gt;Start your emulator or device. If you use my archive, you can create an avd of Android 4.0.4 and run &lt;code&gt;./startemu.sh &amp;lt;avd name&amp;gt;&lt;/code&gt; to start the emulator.&lt;/p&gt;
&lt;p&gt;Open Android Browser(or any app using WebView) and start gdbserver:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; adb shell
&lt;span class="go"&gt;* daemon not running. starting it now on port 5037 *&lt;/span&gt;
&lt;span class="go"&gt;* daemon started successfully *&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt; ps | busybox grep browser
&lt;span class="go"&gt;app_22    709   37    149728 46064 ffffffff 400113c0 S com.android.browser&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt; gdbserver :1337 --attach 709
&lt;span class="go"&gt;Attached; pid = 709&lt;/span&gt;
&lt;span class="go"&gt;Listening on port 1337&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open port forwarding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; adb forward tcp:1337 tcp:1337
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Start gdb, set symbol and source paths, and start remote debuging:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; arm-linux-androideabi-gdb app_process
&lt;span class="go"&gt;(gdb) set solib-search-path symbols&lt;/span&gt;
&lt;span class="go"&gt;(gdb) directory sources&lt;/span&gt;
&lt;span class="go"&gt;(gdb) target remote :1337&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now everything works like a charm!&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://mhandroid.wordpress.com/2011/01/25/how-cc-debugging-works-on-android/"&gt;How C/C++ Debugging Works on Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cansecwest.com/slides/2013/An%20Android%20Hacker's%20Journey-%20Challenges%20in%20Android%20Security%20Research.pptx"&gt;An Android Hacker's Journey&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Android"></category><category term="debugging"></category><category term="WebKit"></category></entry></feed>